# -*- coding: utf-8 -*-
"""Gói phần mềm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rTpqO_Zwai5tlB0PMQ5oWch2gDYeGQ8e
"""

!pip install google

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from google import genai

client = genai.Client(api_key="AIzaSyB5TmDi3Bl_Ou7s1bg9Cky_6fmP6JVjDJk")

#############################################
# Block 1: Biểu đồ giá (Line Chart)
#############################################
# Đọc dữ liệu CLX từ file CSV
clx_file = "Dữ liệu Lịch sử CLX.csv"
df_clx = pd.read_csv(clx_file)
df_clx["Ngày"] = pd.to_datetime(df_clx["Ngày"], dayfirst=True, errors='coerce')
df_clx["Lần cuối"] = df_clx["Lần cuối"].astype(str).str.replace(",", "", regex=True)
df_clx["Lần cuối"] = pd.to_numeric(df_clx["Lần cuối"], errors='coerce')

max_date = df_clx["Ngày"].max()
df_clx_6 = df_clx[df_clx["Ngày"] >= max_date - pd.DateOffset(months=6)]
df_clx_5y = df_clx[df_clx["Ngày"] >= max_date - pd.DateOffset(years=5)]

fig = make_subplots(rows=1, cols=2,
    subplot_titles=["6 MONTHS", "5 YEARS"])
trace6 = go.Scatter(
    x=df_clx_6["Ngày"],
    y=df_clx_6["Lần cuối"],
    mode="lines",
    line=dict(width=4, color="#1c4587"),
    showlegend=False)
fig.add_trace(trace6, row=1, col=1)
trace5 = go.Scatter(
    x=df_clx_5y["Ngày"],
    y=df_clx_5y["Lần cuối"],
    mode="lines",
    line=dict(width=4, color="#1c4587"),
    showlegend=False)
fig.add_trace(trace5, row=1, col=2)
fig.update_xaxes(showgrid=True, tickformat='%m/%Y', title_text="",
    ticks="inside", ticklen=5, showline=True, mirror=True,
    linecolor="black", linewidth=1, row=1, col=1)
fig.update_xaxes(showgrid=True, tickformat='%Y', title_text="",
    ticks="inside", ticklen=5, showline=True, mirror=True,
    linecolor="black", linewidth=1, row=1, col=2)
fig.update_yaxes(showgrid=False, title_text="Price (1.000 VND)", row=1, col=1)
fig.update_yaxes(showgrid=False, title_text="Price (1.000 VND)", row=1, col=2)
fig.update_layout(plot_bgcolor='white', paper_bgcolor='white',
    margin=dict(t=60, b=20), showlegend=False)
fig.show()

#############################################
# Block 2: SHARE DETAIL (Từ CSV)
#############################################
for col in ["Cao", "Thấp"]:
    df_clx[col] = df_clx[col].astype(str).str.replace(",", "", regex=True)
    df_clx[col] = pd.to_numeric(df_clx[col], errors='coerce')

def convert_kl(kl_str):
    try:
        s = str(kl_str).strip()
        if s.endswith("K"):
            return float(s[:-1]) * 10000
        else:
            return float(s)
    except Exception:
        return None

df_clx["KL"] = df_clx["KL"].apply(convert_kl)
anchor = pd.to_datetime("31/12/2024", dayfirst=True)
df_anchor = df_clx[df_clx["Ngày"] <= anchor].sort_values("Ngày", ascending=False)
closing_price = df_anchor.iloc[0]["Lần cuối"] if not df_anchor.empty else None
start_52w = anchor - pd.DateOffset(days=364)
df_52w = df_clx[(df_clx["Ngày"] >= start_52w) & (df_clx["Ngày"] <= anchor)]
max_52w = df_52w["Cao"].max()
min_52w = df_52w["Thấp"].min()
df_last5 = df_clx[df_clx["Ngày"] <= anchor].sort_values("Ngày", ascending=False).head(5)
avg_KL_5 = df_last5["KL"].mean()
df_last10 = df_clx[df_clx["Ngày"] <= anchor].sort_values("Ngày", ascending=False).head(10)
avg_KL_10 = df_last10["KL"].mean()

def format_num(x, decimals=0):
    if pd.isnull(x):
        return ""
    s = format(x, f",.{decimals}f")
    s = s.replace(",", "X").replace(".", ",").replace("X", ".")
    return s

formatted_table1 = {
    "Close Price": format_num(closing_price, 0),
    "52 Wk high": format_num(max_52w, 0),
    "52 Wk low": format_num(min_52w, 0),
    "5 days Average Volume": format_num(avg_KL_5, 2),
    "10 days Average Volume": format_num(avg_KL_10, 2)
}
table1 = pd.DataFrame(formatted_table1, index=["CLX"])
final_table = table1.T
final_table.columns = [""]
print("SHARE DETAIL")
print(final_table)
print("\n")

# --------------------------
# BẢNG 2: Phần trăm thay đổi so sánh giữa CLX và VNINDEX
# --------------------------
df_vnindex = pd.read_csv("Dữ liệu Lịch sử VN Index.csv")
df_vnindex["Ngày"] = pd.to_datetime(df_vnindex["Ngày"], dayfirst=True, errors='coerce')
for df in [df_clx, df_vnindex]:
    df["% Thay đổi"] = df["% Thay đổi"].astype(str).str.replace("%", "", regex=True)
    df["% Thay đổi"] = pd.to_numeric(df["% Thay đổi"], errors='coerce')

def get_pct_change(df, target_date):
    df_temp = df[df["Ngày"] <= target_date].sort_values("Ngày", ascending=False)
    return df_temp.iloc[0]["% Thay đổi"] if not df_temp.empty else None

periods = {
    "1 day": pd.DateOffset(days=1),
    "5 days": pd.DateOffset(days=5),
    "3 months": pd.DateOffset(months=3),
    "6 months": pd.DateOffset(months=6),
    "1 year": pd.DateOffset(years=1)
}
clx_pct = {}
vnindex_pct = {}
for label, offset in periods.items():
    target_date = anchor - offset
    clx_pct[label] = get_pct_change(df_clx, target_date)
    vnindex_pct[label] = get_pct_change(df_vnindex, target_date)
data_table2 = {
    "1 day": [clx_pct["1 day"], vnindex_pct["1 day"]],
    "5 days": [clx_pct["5 days"], vnindex_pct["5 days"]],
    "3 months": [clx_pct["3 months"], vnindex_pct["3 months"]],
    "6 months": [clx_pct["6 months"], vnindex_pct["6 months"]],
    "1 year": [clx_pct["1 year"], vnindex_pct["1 year"]],
}
table2 = pd.DataFrame(data_table2, index=["CLX (%)", "VNINDEX (%)"])
print("PERCENTAGE CHANGE")
print(table2)
print("\n")

# Load all files once at the beginning
years = [2021, 2022, 2023, 2024]
dataframes = {}

# Function to get column by keyword
def get_col_by_keyword(df, keyword):
    matches = [col for col in df.columns if keyword.lower() in col.lower()]
    return matches[0] if matches else None

# Format function
def format_full(x):
    if pd.isnull(x):
        return ""
    s = format(x, ",.2f")
    s = s.replace(",", "X").replace(".", ",").replace("X", ".")
    return s

# Load all data files once
for year in years:
    file_name = f"{year}-Vietnam.xlsx"
    df = pd.read_excel(file_name)
    df.columns = df.columns.str.strip()
    df_clx = df[df["Mã"] == "CLX"].copy()
    dataframes[year] = df_clx

#############################################
# Block 3: BALANCE SHEET
#############################################
mapping_keywords_bs = {
    "Total Current Assets": "tài sản ngắn hạn",
    "Property/Plant/Equipment, Total - Net": "tài sản cố định",
    "Total Assets": "tổng cộng tài sản",
    "Total Current Liabilities": "nợ ngắn hạn",
    "Total Long-Term Debt": "nợ dài hạn",
    "Total Liabilities": "nợ phải trả",
    "Equity": "vốn chủ sở hữu"
}

balance_data = {}
for year in years:
    df_clx = dataframes[year]
    data = {}
    for key, keyword in mapping_keywords_bs.items():
        col_name = get_col_by_keyword(df_clx, keyword)
        if col_name:
            value = pd.to_numeric(df_clx[col_name].astype(str).str.replace(",", "", regex=True), errors='coerce')
            data[key] = value.iloc[0] if not value.empty else None
        else:
            data[key] = None
    if year in [2021, 2022]:
        for key in data:
            if data[key] is not None:
                data[key] = data[key] / 1000000000.00
    balance_data[year] = data

balance_df = pd.DataFrame.from_dict(balance_data, orient='index')
balance_df.sort_index(inplace=True)
formatted_balance_df = balance_df.apply(lambda col: col.map(format_full))
final_balance_df = formatted_balance_df.T
print("BALANCE SHEET (unit: Billion VND)")
print(final_balance_df)
print("\n")

fig1 = make_subplots(
    rows=1, cols=2,
    subplot_titles=["Assets and Equity Over Years", "Liabilities and Equity Over Years"],
    specs=[[{"secondary_y": True}, {}]]
)
fig1.add_trace(
    go.Scatter(
        x=balance_df.index,
        y=balance_df["Total Assets"],
        mode='lines+markers',
        name="Total Assets (Billion VND)",
        marker=dict(symbol="circle", size=13),
        marker_color="#1155cc",
        line=dict(width=5)
    ),
    row=1, col=1, secondary_y=False
)
fig1.add_trace(
    go.Scatter(
        x=balance_df.index,
        y=balance_df["Equity"],
        mode='lines+markers',
        name="Equity (Billion VND)",
        marker=dict(symbol="circle-open", size=13),
        marker_color="#38761d",
        line=dict(dash='dash', width=5)
    ),
    row=1, col=1, secondary_y=True
)
fig1.update_yaxes(
    title_text="Total Assets (Billion VND)",
    showgrid=False,
    secondary_y=False,
    row=1, col=1
)
fig1.update_yaxes(
    title_text="Equity (Billion VND)",
    showgrid=False,
    secondary_y=True,
    row=1, col=1
)
fig1.update_xaxes(
    title_text="Year",
    ticks="inside", ticklen=5,
    showline=True, mirror=True,
    linecolor="black", linewidth=1,
    row=1, col=1
)
fig1.add_trace(
    go.Bar(
        x=balance_df.index,
        y=balance_df["Total Liabilities"],
        name="Total Liabilities",
        marker_color="#ff9900"
    ),
    row=1, col=2
)
fig1.add_trace(
    go.Bar(
        x=balance_df.index,
        y=balance_df["Equity"],
        name="Equity",
        marker_color="#38761d"
    ),
    row=1, col=2
)
fig1.update_layout(
    barmode='stack',
    plot_bgcolor='white',
    paper_bgcolor='white'
)
fig1.update_xaxes(
    title_text="Year", showgrid=True,
    ticks="inside", ticklen=5,
    showline=True, mirror=True,
    linecolor="black", linewidth=1,
    row=1, col=2
)
fig1.update_yaxes(
    title_text="Value (Billion VND)",
    showgrid=False,
    row=1, col=2
)
fig1.show()

def call_ai_api(prompt):
  response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=prompt,
)
  return(response.text)

def ai_analysis_balance_sheet_api(balance_df):
    # Convert the DataFrame to a CSV string
    data_str = balance_df.to_csv(index=True)
    prompt = f"""Above is the balance sheet data (2021-2024):
{data_str}

In 2-3 complex sentences, describe the key symptoms observed in this data, what they indicate about the company's financial health, and provide actionable recommendations."""
    analysis = call_ai_api(prompt)
    return analysis


# Ví dụ gọi hàm:
analysis_bs = ai_analysis_balance_sheet_api(balance_df)
print("AI Analysis for Balance Sheet:")
print(analysis_bs)

#############################################
# Block 4: INCOME STATEMENT (Từ Excel: 2021-2024)
#############################################
indicator_mapping_is = {
    "Revenue": "doanh thu bán hàng",
    "Net Income Before Taxes": "tổng lợi nhuận kế toán trước thuế",
    "Net Income After Taxes": "lợi nhuận sau thuế"
}
operating_expense_keywords = [
    "chi phí tài chính",
    "chi phí bán hàng",
    "chi phí quản lý doanh nghiệp"
]

income_data = {}
for year in years:
    df_clx = dataframes[year]
    indicators = {}

    # Extract Revenue
    col_rev = get_col_by_keyword(df_clx, indicator_mapping_is["Revenue"])
    if col_rev:
        rev_value = pd.to_numeric(df_clx[col_rev].astype(str).str.replace(",", "", regex=True), errors='coerce')
        indicators["Revenue"] = rev_value.iloc[0] if not rev_value.empty else None
    else:
        indicators["Revenue"] = None

    # Calculate Total Operating Expense
    total_operating_expense = 0
    valid_expense = False
    for kw in operating_expense_keywords:
        col_exp = get_col_by_keyword(df_clx, kw)
        if col_exp:
            exp_value = pd.to_numeric(df_clx[col_exp].astype(str).str.replace(",", "", regex=True), errors='coerce')
            if not exp_value.empty and pd.notnull(exp_value.iloc[0]):
                total_operating_expense += exp_value.iloc[0]
                valid_expense = True
    indicators["Total Operating Expense"] = total_operating_expense if valid_expense else None

    # Extract Net Income Before Taxes
    col_nibt = get_col_by_keyword(df_clx, indicator_mapping_is["Net Income Before Taxes"])
    if col_nibt:
        nibt_value = pd.to_numeric(df_clx[col_nibt].astype(str).str.replace(",", "", regex=True), errors='coerce')
        indicators["Net Income Before Taxes"] = nibt_value.iloc[0] if not nibt_value.empty else None
    else:
        indicators["Net Income Before Taxes"] = None

    # Extract Net Income After Taxes
    col_niat = get_col_by_keyword(df_clx, indicator_mapping_is["Net Income After Taxes"])
    if col_niat:
        niat_value = pd.to_numeric(df_clx[col_niat].astype(str).str.replace(",", "", regex=True), errors='coerce')
        indicators["Net Income After Taxes"] = niat_value.iloc[0] if not niat_value.empty else None
    else:
        indicators["Net Income After Taxes"] = None

    # Convert units for 2021, 2022
    if year in [2021, 2022]:
        for key in indicators:
            if indicators[key] is not None:
                indicators[key] = indicators[key] / 1000000000.0

    # Calculate Operating Income
    if (indicators["Revenue"] is not None) and (indicators["Total Operating Expense"] is not None):
        indicators["Operating Income"] = indicators["Revenue"] - indicators["Total Operating Expense"]
    else:
        indicators["Operating Income"] = None

    income_data[year] = indicators

income_df = pd.DataFrame.from_dict(income_data, orient='index')
income_df.sort_index(inplace=True)
formatted_income_df = income_df.apply(lambda col: col.map(format_full))
final_income_df = formatted_income_df.T
print("INCOME STATEMENT (unit: Billion VND)")
print(final_income_df)
print("\n")

#############################################
# Block 5: PROFITABILITY ANALYSIS (Từ Excel: 2021-2024)
#############################################
profit_data = {}
for year in years:
    df_clx = dataframes[year]

    # Extract values for profitability calculation
    col_rev = get_col_by_keyword(df_clx, indicator_mapping_is["Revenue"])
    revenue = None
    if col_rev:
        rev_val = pd.to_numeric(df_clx[col_rev].astype(str).str.replace(",", "", regex=True), errors='coerce')
        revenue = rev_val.iloc[0] if not rev_val.empty else None

    col_niat = get_col_by_keyword(df_clx, indicator_mapping_is["Net Income After Taxes"])
    net_income_after_taxes = None
    if col_niat:
        niat_val = pd.to_numeric(df_clx[col_niat].astype(str).str.replace(",", "", regex=True), errors='coerce')
        net_income_after_taxes = niat_val.iloc[0] if not niat_val.empty else None

    # Extract balance sheet items
    col_ta = get_col_by_keyword(df_clx, mapping_keywords_bs["Total Assets"])
    total_assets = pd.to_numeric(df_clx[col_ta].astype(str).str.replace(",", "", regex=True), errors='coerce').iloc[0] if col_ta and not df_clx[col_ta].empty else None

    col_eq = get_col_by_keyword(df_clx, mapping_keywords_bs["Equity"])
    equity = pd.to_numeric(df_clx[col_eq].astype(str).str.replace(",", "", regex=True), errors='coerce').iloc[0] if col_eq and not df_clx[col_eq].empty else None

    col_ltd = get_col_by_keyword(df_clx, mapping_keywords_bs["Total Long-Term Debt"])
    long_term_debt = pd.to_numeric(df_clx[col_ltd].astype(str).str.replace(",", "", regex=True), errors='coerce').iloc[0] if col_ltd and not df_clx[col_ltd].empty else None

    col_td = get_col_by_keyword(df_clx, mapping_keywords_bs["Total Liabilities"])
    total_debt = pd.to_numeric(df_clx[col_td].astype(str).str.replace(",", "", regex=True), errors='coerce').iloc[0] if col_td and not df_clx[col_td].empty else None

    # Convert units for 2021, 2022
    if year in [2021, 2022]:
        revenue = revenue / 1000000000.00 if revenue is not None else None
        net_income_after_taxes = net_income_after_taxes / 1000000000.00 if net_income_after_taxes is not None else None
        total_assets = total_assets / 1000000000.00 if total_assets is not None else None
        equity = equity / 1000000000.00 if equity is not None else None
        long_term_debt = long_term_debt / 1000000000.00 if long_term_debt is not None else None
        total_debt = total_debt / 1000000000.00 if total_debt is not None else None

    # Calculate ratios
    roe = (net_income_after_taxes / equity * 100) if (net_income_after_taxes is not None and equity and equity != 0) else None
    roa = (net_income_after_taxes / total_assets * 100) if (net_income_after_taxes is not None and total_assets and total_assets != 0) else None
    iat_margin = (net_income_after_taxes / revenue * 100) if (net_income_after_taxes is not None and revenue and revenue != 0) else None
    rev_to_assets = (revenue / total_assets) if (revenue is not None and total_assets and total_assets != 0) else None
    ltd_to_equity = (long_term_debt / equity) if (long_term_debt is not None and equity and equity != 0) else None
    td_to_equity = (total_debt / equity) if (total_debt is not None and equity and equity != 0) else None

    profit_data[year] = {
        "ROE (%)": roe,
        "ROA (%)": roa,
        "Income After Tax Margin (%)": iat_margin,
        "Revenue/Total Assets": rev_to_assets,
        "Long Term Debt/Equity": ltd_to_equity,
        "Total Debt/Equity": td_to_equity
    }

profit_df = pd.DataFrame.from_dict(profit_data, orient='index')
profit_df.sort_index(inplace=True)
formatted_profit_df = profit_df.apply(lambda col: col.map(format_full))
final_profit_df = formatted_profit_df.T
print("PROFITABILITY ANALYSIS")
print(final_profit_df)

# PHẦN 2: VẼ BIỂU ĐỒ
# Ép kiểu index sang string để trục x hiển thị đúng năm
income_df.index = income_df.index.astype(str)
profit_df.index = profit_df.index.astype(str)
balance_df.index = balance_df.index.astype(str)

# ----- Figure 1: Annual Income and Profitability -----
fig_income = make_subplots(specs=[[{"secondary_y": True}]])

# Bar: Revenue
fig_income.add_trace(
    go.Bar(
        x=income_df.index,
        y=income_df["Revenue"],
        name='Revenue',
        marker_color='#38761d',
        textposition='none'
    ),
    secondary_y=False,
)

# Bar: Net Income After Taxes
fig_income.add_trace(
    go.Bar(
        x=income_df.index,
        y=income_df["Net Income After Taxes"],
        name='Net Income After Taxes',
        marker_color='#ff9900',
        textposition='none'
    ),
    secondary_y=False,
)

# Line: Income After Tax Margin (%)
line_text_margin = [f"{val:.1f}%" if pd.notnull(val) else "" for val in profit_df["Income After Tax Margin (%)"]]
fig_income.add_trace(
    go.Scatter(
        x=profit_df.index,
        y=profit_df["Income After Tax Margin (%)"],
        name='Income After Tax Margin (%)',
        mode='lines+markers+text',
        line=dict(color='#FFD700', width=3),
        marker=dict(size=8),
        text=line_text_margin,
        textposition="top center",
        textfont=dict(size=10, color='#FFD700')
    ),
    secondary_y=True,
)

fig_income.update_layout(
    title_text='Annual Income and Profitability',
    barmode='group',
    xaxis_title='Year',
    plot_bgcolor='white',
    paper_bgcolor='white',
    # Ép kiểu trục x thành dạng category để nó hiển thị đúng nhãn
    xaxis=dict(type='category')
)

# Trục y chính (Value)
fig_income.update_yaxes(
    title_text='Value (Billion VND)',
    secondary_y=False,
    showgrid=False
)

# Trục y phụ (%)
fig_income.update_yaxes(
    title_text='%',
    secondary_y=True,
    showgrid=False,
    # Bắt đầu từ 0, max 50, bước nhảy 5
    range=[0, 40],
    dtick=10
)

# Cài đặt cho trục x
fig_income.update_xaxes(
    showline=True,
    linewidth=1,
    linecolor='black',
    mirror=True,
    ticks="inside",
    ticklen=5
)

fig_income.show()


# ----- Figure 2: Equity & ROE and Assets & ROA -----
fig_ratios = make_subplots(
    rows=1, cols=2,
    subplot_titles=("Equity & ROE Over Years", "Assets & ROA Over Years"),
    specs=[[{"secondary_y": True}, {"secondary_y": True}]]
)

# Subplot 1 (Equity & ROE)
fig_ratios.add_trace(
    go.Bar(
        x=balance_df.index,
        y=balance_df['Equity'],
        name='Equity',
        marker_color='#38761d',
        textposition='none'
    ),
    row=1, col=1, secondary_y=False
)

line_text_roe = [f"{val:.1f}%" if pd.notnull(val) else "" for val in profit_df["ROE (%)"]]
fig_ratios.add_trace(
    go.Scatter(
        x=profit_df.index,
        y=profit_df['ROE (%)'],
        name='ROE (%)',
        mode='lines+markers+text',
        line=dict(color='#FFD700', width=3),
        marker=dict(size=8),
        text=line_text_roe,
        textposition="top center",
        textfont=dict(size=10, color='#FFD700')
    ),
    row=1, col=1, secondary_y=True
)

# Subplot 2 (Assets & ROA)
fig_ratios.add_trace(
    go.Bar(
        x=balance_df.index,
        y=balance_df['Total Assets'],
        name='Total Assets',
        marker_color='#38761d',
        textposition='none'
    ),
    row=1, col=2, secondary_y=False
)

line_text_roa = [f"{val:.1f}%" if pd.notnull(val) else "" for val in profit_df["ROA (%)"]]
fig_ratios.add_trace(
    go.Scatter(
        x=profit_df.index,
        y=profit_df['ROA (%)'],
        name='ROA (%)',
        mode='lines+markers+text',
        line=dict(color='#FFD700', width=3),
        marker=dict(size=8),
        text=line_text_roa,
        textposition="top center",
        textfont=dict(size=10, color='#FFD700')
    ),
    row=1, col=2, secondary_y=True
)

fig_ratios.update_layout(
    plot_bgcolor='white',
    paper_bgcolor='white',
    showlegend=True,
    # Ép kiểu trục x cho cả hai subplot thành dạng category
    xaxis=dict(type='category'),
    xaxis2=dict(type='category')
)

# Subplot 1: y-axes
fig_ratios.update_yaxes(
    title_text='Value (Billion VND)',
    row=1, col=1,
    secondary_y=False,
    showgrid=False,
)
fig_ratios.update_yaxes(
    title_text='%',
    row=1, col=1,
    secondary_y=True,
    showgrid=False,
    range=[0, 40],  # bắt đầu 0, max 50
    dtick=10
)

# Subplot 2: y-axes
fig_ratios.update_yaxes(
    title_text='Value (Billion VND)',
    row=1, col=2,
    secondary_y=False,
    showgrid=False
)
fig_ratios.update_yaxes(
    title_text='%',
    row=1, col=2,
    secondary_y=True,
    showgrid=False,
    range=[0, 40],
    dtick=10
)

# Subplot 1 & 2: x-axes
fig_ratios.update_xaxes(
    title_text='Year',
    row=1, col=1,
    showline=True,
    linewidth=1,
    linecolor='black',
    mirror=True,
    ticks="inside", ticklen=5
)
fig_ratios.update_xaxes(
    title_text='Year',
    row=1, col=2,
    showline=True,
    linewidth=1,
    linecolor='black',
    mirror=True,
    ticks="inside", ticklen=5
)

fig_ratios.show()

def ai_analysis_financials_api(income_df, profit_df, balance_df):
    # Chuyển đổi các dataframe thành chuỗi CSV
    income_str = income_df.to_csv(index=True)
    profit_str = profit_df.to_csv(index=True)
    balance_str = balance_df.to_csv(index=True)

    prompt = f"""Below is the company's complete financial dataset:

--- Income Statement (Billion VND) ---
{income_str}

--- Profitability Analysis ---
{profit_str}

--- Balance Sheet (Billion VND) ---
{balance_str}

In 2-3 complex sentences, summarize the key symptoms observed in the data, explain what they indicate about the company's financial health, and provide actionable recommendations."""
    analysis = call_ai_api(prompt)
    return analysis

# Ví dụ gọi hàm:
analysis_financials = ai_analysis_financials_api(income_df, profit_df, balance_df)
print("Overall AI Analysis")
print(analysis_financials)

response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents="Give me the business summary of CTCP Xuất nhập khẩu và Đầu tư Chợ Lớn (Stock: CLX). Only in one paragraph, with 4-5 sentences",
)

print(response.text)

from IPython.display import display, HTML

html_code = """
<div style='display: flex; justify-content: space-between; padding: 10px 0; border-top: 1px solid #ccc; border-bottom: 1px solid #ccc;'>
  <!-- Left Column -->
  <div style='width: 45%;'>
    <h4 style='margin: 0;'>GENERAL INFORMATION</h4>
    <p><strong>Exchange Code:</strong> HNX</p>
    <p><strong>TRBC Industry:</strong> Consumer Non-cyclicals</p>
    <p><strong>No. of Employees:</strong> 100</p>
    <p><strong>Company Market Cap (VND):</strong> 1.53B</p>
  </div>

  <!-- Right Column -->
  <div style='width: 45%;'>
    <h4 style='margin: 0;'>COMPANY DETAILS</h4>
    <p><strong>Address:</strong> VIET NAM</p>
    <p><strong>Telephone:</strong> +(84-28) 38547102</p>
    <p><strong>Company Link:</strong>
      <a href='https://www.cholimex.vn/' target='_blank'>https://www.cholimex.vn/</a>
    </p>
  </div>
</div>
"""

display(HTML(html_code))